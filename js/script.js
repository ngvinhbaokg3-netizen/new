// ·ª®ng d·ª•ng Text-to-Speech ti·∫øng Vi·ªát v·ªõi ElevenLabs
document.addEventListener('DOMContentLoaded', () => {
  // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
  const textInput = document.getElementById('textInput');
  const voiceSelect = document.getElementById('voiceSelect');
  const speedRange = document.getElementById('speedRange');
  const speedValue = document.getElementById('speedValue');
  const speakBtn = document.getElementById('speakBtn');
  const stopBtn = document.getElementById('stopBtn');
  const downloadBtn = document.getElementById('downloadBtn');
  const errorMsg = document.getElementById('error-message');
  const statusMsg = document.getElementById('status-message');

  let currentUtterance = null;
  let isPlaying = false;
  let elevenLabsVoices = {};
  let useElevenLabs = false;
  let currentAudioBlob = null;
  let currentFileName = '';

  // T·∫£i danh s√°ch gi·ªçng n√≥i ElevenLabs
  async function loadElevenLabsVoices() {
    try {
      const response = await fetch('./voices.json');
      elevenLabsVoices = await response.json();
      console.log('‚úÖ ƒê√£ t·∫£i danh s√°ch gi·ªçng ElevenLabs:', Object.keys(elevenLabsVoices).length, 'gi·ªçng');
    } catch (error) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i voices.json:', error);
      elevenLabsVoices = {};
    }
  }

  // Ki·ªÉm tra h·ªó tr·ª£ SpeechSynthesis API
  if (!('speechSynthesis' in window)) {
    showError('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ch·ª©c nƒÉng chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i nh∆∞ Chrome, Firefox, Safari ho·∫∑c Edge.');
    speakBtn.disabled = true;
    return;
  }

  // Kh·ªüi t·∫°o
  loadElevenLabsVoices();

  // H√†m hi·ªÉn th·ªã l·ªói
  function showError(message) {
    errorMsg.textContent = message;
    errorMsg.classList.add('show');
    statusMsg.classList.remove('show');
  }

  // H√†m hi·ªÉn th·ªã tr·∫°ng th√°i
  function showStatus(message) {
    statusMsg.textContent = message;
    statusMsg.classList.add('show');
    errorMsg.classList.remove('show');
  }

  // H√†m ·∫©n t·∫•t c·∫£ th√¥ng b√°o
  function hideMessages() {
    errorMsg.classList.remove('show');
    statusMsg.classList.remove('show');
  }

  // H√†m t·∫°o t√™n file
  function generateFileName(text, voiceName) {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const shortText = text.substring(0, 30).replace(/[^a-zA-Z0-9\u00C0-\u024F\u1E00-\u1EFF]/g, '_');
    const cleanVoiceName = voiceName.replace(/[^a-zA-Z0-9]/g, '_');
    return `TTS_${cleanVoiceName}_${shortText}_${timestamp}.mp3`;
  }

  // H√†m t·∫£i xu·ªëng file
  function downloadAudio(blob, filename) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // H√†m l·∫•y v√† l·ªçc gi·ªçng n√≥i ti·∫øng Vi·ªát
  function populateVoices() {
    const voices = speechSynthesis.getVoices();
    const vietnameseVoices = voices.filter(voice => 
      voice.lang.toLowerCase().includes('vi') || 
      voice.lang.toLowerCase().includes('vn') ||
      voice.name.toLowerCase().includes('vietnam')
    );
    
    // X√≥a c√°c t√πy ch·ªçn c≈©
    voiceSelect.innerHTML = '';
    
    // Th√™m nh√≥m gi·ªçng h·ªá th·ªëng
    const systemGroup = document.createElement('optgroup');
    systemGroup.label = 'üîä Gi·ªçng n√≥i h·ªá th·ªëng';
    voiceSelect.appendChild(systemGroup);
    
    // Th√™m t√πy ch·ªçn m·∫∑c ƒë·ªãnh
    const defaultOption = document.createElement('option');
    defaultOption.textContent = 'Gi·ªçng m·∫∑c ƒë·ªãnh (H·ªá th·ªëng)';
    defaultOption.value = 'default';
    defaultOption.dataset.type = 'system';
    systemGroup.appendChild(defaultOption);
    
    // Th√™m c√°c gi·ªçng ti·∫øng Vi·ªát h·ªá th·ªëng
    vietnameseVoices.forEach((voice, index) => {
      const option = document.createElement('option');
      option.textContent = `${voice.name} (${voice.lang})`;
      option.value = voice.name;
      option.dataset.voiceIndex = index;
      option.dataset.type = 'system';
      systemGroup.appendChild(option);
    });
    
    // Th√™m nh√≥m gi·ªçng ElevenLabs
    if (Object.keys(elevenLabsVoices).length > 0) {
      const elevenGroup = document.createElement('optgroup');
      elevenGroup.label = 'üé≠ Gi·ªçng n√≥i ElevenLabs (C·∫ßn API Key)';
      voiceSelect.appendChild(elevenGroup);
      
      Object.keys(elevenLabsVoices).forEach(voiceName => {
        const option = document.createElement('option');
        option.textContent = voiceName;
        option.value = voiceName;
        option.dataset.type = 'elevenlabs';
        elevenGroup.appendChild(option);
      });
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    const totalVoices = vietnameseVoices.length + Object.keys(elevenLabsVoices).length;
    if (totalVoices === 0) {
      showStatus('S·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng.');
    } else {
      hideMessages();
      showStatus(`ƒê√£ t√¨m th·∫•y ${vietnameseVoices.length} gi·ªçng h·ªá th·ªëng v√† ${Object.keys(elevenLabsVoices).length} gi·ªçng ElevenLabs.`);
    }
  }

  // C·∫≠p nh·∫≠t hi·ªÉn th·ªã t·ªëc ƒë·ªô
  speedRange.addEventListener('input', () => {
    speedValue.textContent = speedRange.value + 'x';
  });

  // G·ªçi h√†m l·∫•y gi·ªçng n√≥i ngay l·∫≠p t·ª©c v√† l·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi
  populateVoices();
  
  // M·ªôt s·ªë tr√¨nh duy·ªát t·∫£i gi·ªçng n√≥i b·∫•t ƒë·ªìng b·ªô
  if (speechSynthesis.onvoiceschanged !== undefined) {
    speechSynthesis.onvoiceschanged = populateVoices;
  }

  // H√†m d·ª´ng ph√°t √¢m
  function stopSpeaking() {
    if (speechSynthesis.speaking) {
      speechSynthesis.cancel();
    }
    
    // D·ª´ng ElevenLabs audio n·∫øu ƒëang ph√°t
    if (currentUtterance && currentUtterance instanceof Audio) {
      currentUtterance.pause();
      currentUtterance.currentTime = 0;
    }
    
    isPlaying = false;
    speakBtn.disabled = false;
    stopBtn.disabled = true;
    speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
    hideMessages();
  }

  // X·ª≠ l√Ω s·ª± ki·ªán n√∫t d·ª´ng
  stopBtn.addEventListener('click', stopSpeaking);

  // X·ª≠ l√Ω s·ª± ki·ªán n√∫t t·∫£i xu·ªëng
  downloadBtn.addEventListener('click', () => {
    if (currentAudioBlob && currentFileName) {
      downloadAudio(currentAudioBlob, currentFileName);
      showStatus(`‚úÖ ƒê√£ t·∫£i xu·ªëng: ${currentFileName}`);
      setTimeout(() => {
        hideMessages();
      }, 3000);
    } else {
      showError('Kh√¥ng c√≥ file audio ƒë·ªÉ t·∫£i xu·ªëng. Vui l√≤ng t·∫°o gi·ªçng n√≥i tr∆∞·ªõc.');
    }
  });

  // Th√™m c√°c ph·∫ßn t·ª≠ DOM cho ElevenLabs
  const apiKeyInput = document.getElementById('apiKeyInput');
  const apiKeyGroup = document.getElementById('apiKeyGroup');

  // Hi·ªÉn th·ªã/·∫©n tr∆∞·ªùng API Key khi ch·ªçn gi·ªçng ElevenLabs
  voiceSelect.addEventListener('change', () => {
    const selectedOption = voiceSelect.options[voiceSelect.selectedIndex];
    const voiceType = selectedOption?.dataset.type;
    
    if (voiceType === 'elevenlabs') {
      apiKeyGroup.style.display = 'block';
      useElevenLabs = true;
    } else {
      apiKeyGroup.style.display = 'none';
      useElevenLabs = false;
      // Reset download button cho gi·ªçng h·ªá th·ªëng
      downloadBtn.disabled = true;
      currentAudioBlob = null;
      currentFileName = '';
    }
  });

  // H√†m g·ªçi ElevenLabs API
  async function generateElevenLabsTTS(text, voiceName, apiKey) {
    const voiceInfo = elevenLabsVoices[voiceName];
    if (!voiceInfo) {
      throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin gi·ªçng n√≥i');
    }

    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceInfo.voice_id}`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': apiKey
      },
      body: JSON.stringify({
        text: text,
        model_id: 'eleven_multilingual_v2',
        voice_settings: voiceInfo.settings
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    return response.blob();
  }

  // X·ª≠ l√Ω s·ª± ki·ªán n√∫t ph√°t
  speakBtn.addEventListener('click', async () => {
    const text = textInput.value.trim();
    
    // Ki·ªÉm tra vƒÉn b·∫£n ƒë·∫ßu v√†o
    if (!text) {
      showError('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ti·∫øng Vi·ªát tr∆∞·ªõc khi chuy·ªÉn th√†nh gi·ªçng n√≥i.');
      textInput.focus();
      return;
    }

    // Ki·ªÉm tra ƒë·ªô d√†i vƒÉn b·∫£n
    if (text.length > 5000) {
      showError('VƒÉn b·∫£n qu√° d√†i. Vui l√≤ng nh·∫≠p t·ªëi ƒëa 5000 k√Ω t·ª±.');
      return;
    }

    const selectedVoiceValue = voiceSelect.value;
    const selectedOption = voiceSelect.options[voiceSelect.selectedIndex];
    const voiceType = selectedOption?.dataset.type;

    // X·ª≠ l√Ω ElevenLabs TTS
    if (voiceType === 'elevenlabs') {
      const apiKey = apiKeyInput.value.trim();
      if (!apiKey) {
        showError('Vui l√≤ng nh·∫≠p API Key ElevenLabs ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng n√≥i ch·∫•t l∆∞·ª£ng cao.');
        apiKeyInput.focus();
        return;
      }

      try {
        // C·∫≠p nh·∫≠t UI
        isPlaying = true;
        speakBtn.disabled = true;
        stopBtn.disabled = false;
        downloadBtn.disabled = true;
        speakBtn.innerHTML = '<span>üîä</span> ƒêang t·∫°o...';
        showStatus('ƒêang t·∫°o gi·ªçng n√≥i ch·∫•t l∆∞·ª£ng cao v·ªõi ElevenLabs...');

        // G·ªçi API
        const audioBlob = await generateElevenLabsTTS(text, selectedVoiceValue, apiKey);
        const audioUrl = URL.createObjectURL(audioBlob);
        
        // L∆∞u blob v√† t√™n file ƒë·ªÉ t·∫£i xu·ªëng
        currentAudioBlob = audioBlob;
        currentFileName = generateFileName(text, selectedVoiceValue);
        
        // Ph√°t audio
        const audio = new Audio(audioUrl);
        
        audio.onplay = () => {
          speakBtn.innerHTML = '<span>üîä</span> ƒêang ph√°t...';
          showStatus('ƒêang ph√°t gi·ªçng n√≥i ElevenLabs...');
        };
        
        audio.onended = () => {
          isPlaying = false;
          speakBtn.disabled = false;
          stopBtn.disabled = true;
          downloadBtn.disabled = false; // K√≠ch ho·∫°t n√∫t t·∫£i xu·ªëng
          speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
          showStatus('Ho√†n th√†nh ph√°t gi·ªçng n√≥i ElevenLabs. B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng file MP3.');
          URL.revokeObjectURL(audioUrl);
          
          setTimeout(() => {
            hideMessages();
          }, 5000);
        };
        
        audio.onerror = () => {
          isPlaying = false;
          speakBtn.disabled = false;
          stopBtn.disabled = true;
          downloadBtn.disabled = false; // V·∫´n cho ph√©p t·∫£i xu·ªëng n·∫øu file ƒë√£ t·∫°o
          speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
          showError('L·ªói khi ph√°t audio. Nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ t·∫£i xu·ªëng file.');
          URL.revokeObjectURL(audioUrl);
        };

        // L∆∞u reference ƒë·ªÉ c√≥ th·ªÉ d·ª´ng
        currentUtterance = audio;
        audio.play();

      } catch (error) {
        console.error('L·ªói ElevenLabs TTS:', error);
        isPlaying = false;
        speakBtn.disabled = false;
        stopBtn.disabled = true;
        downloadBtn.disabled = true;
        speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
        
        let errorMessage = error.message;
        if (errorMessage.includes('401')) {
          errorMessage = 'API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i API Key ElevenLabs.';
        } else if (errorMessage.includes('429')) {
          errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
        } else if (errorMessage.includes('network')) {
          errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.';
        }
        
        showError(`L·ªói ElevenLabs: ${errorMessage}`);
      }
      return;
    }

    // X·ª≠ l√Ω Speech Synthesis API (gi·ªçng h·ªá th·ªëng)
    // Reset download cho gi·ªçng h·ªá th·ªëng
    downloadBtn.disabled = true;
    currentAudioBlob = null;
    currentFileName = '';
    
    // D·ª´ng ph√°t √¢m hi·ªán t·∫°i n·∫øu c√≥
    if (speechSynthesis.speaking) {
      speechSynthesis.cancel();
    }

    // T·∫°o utterance m·ªõi
    currentUtterance = new SpeechSynthesisUtterance(text);
    
    // Thi·∫øt l·∫≠p ng√¥n ng·ªØ
    currentUtterance.lang = 'vi-VN';
    
    // Thi·∫øt l·∫≠p t·ªëc ƒë·ªô
    currentUtterance.rate = parseFloat(speedRange.value);
    
    // Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng
    currentUtterance.volume = 1;
    
    // Thi·∫øt l·∫≠p cao ƒë·ªô (pitch)
    currentUtterance.pitch = 1;

    // Ch·ªçn gi·ªçng n√≥i
    if (selectedVoiceValue !== 'default') {
      const voices = speechSynthesis.getVoices();
      const selectedVoice = voices.find(voice => voice.name === selectedVoiceValue);
      if (selectedVoice) {
        currentUtterance.voice = selectedVoice;
      }
    }

    // X·ª≠ l√Ω c√°c s·ª± ki·ªán c·ªßa utterance
    currentUtterance.onstart = () => {
      isPlaying = true;
      speakBtn.disabled = true;
      stopBtn.disabled = false;
      speakBtn.innerHTML = '<span>üîä</span> ƒêang ph√°t...';
      showStatus('ƒêang chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i...');
    };

    currentUtterance.onend = () => {
      isPlaying = false;
      speakBtn.disabled = false;
      stopBtn.disabled = true;
      speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
      showStatus('Ho√†n th√†nh chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.');
      
      // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
      setTimeout(() => {
        hideMessages();
      }, 3000);
    };

    currentUtterance.onerror = (event) => {
      console.error('L·ªói Text-to-Speech:', event.error);
      isPlaying = false;
      speakBtn.disabled = false;
      stopBtn.disabled = true;
      speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
      
      let errorMessage = 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.';
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
      switch(event.error) {
        case 'network':
          errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.';
          break;
        case 'synthesis-failed':
          errorMessage = 'Kh√¥ng th·ªÉ t·ªïng h·ª£p gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i v·ªõi gi·ªçng kh√°c.';
          break;
        case 'synthesis-unavailable':
          errorMessage = 'D·ªãch v·ª• t·ªïng h·ª£p gi·ªçng n√≥i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
          break;
        case 'text-too-long':
          errorMessage = 'VƒÉn b·∫£n qu√° d√†i ƒë·ªÉ x·ª≠ l√Ω. Vui l√≤ng r√∫t ng·∫Øn n·ªôi dung.';
          break;
        case 'rate-not-supported':
          errorMessage = 'T·ªëc ƒë·ªô ph√°t kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô.';
          break;
      }
      
      showError(errorMessage);
    };

    currentUtterance.onpause = () => {
      showStatus('ƒê√£ t·∫°m d·ª´ng ph√°t gi·ªçng n√≥i.');
    };

    currentUtterance.onresume = () => {
      showStatus('Ti·∫øp t·ª•c ph√°t gi·ªçng n√≥i.');
    };

    // B·∫Øt ƒë·∫ßu ph√°t
    try {
      speechSynthesis.speak(currentUtterance);
    } catch (error) {
      console.error('L·ªói khi b·∫Øt ƒë·∫ßu ph√°t:', error);
      showError('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ph√°t gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.');
      isPlaying = false;
      speakBtn.disabled = false;
      stopBtn.disabled = true;
      speakBtn.innerHTML = '<span>‚ñ∂</span> T·∫°o Gi·ªçng N√≥i';
    }
  });

  // X·ª≠ l√Ω ph√≠m t·∫Øt
  document.addEventListener('keydown', (event) => {
    // Ctrl/Cmd + Enter ƒë·ªÉ ph√°t
    if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
      event.preventDefault();
      if (!speakBtn.disabled) {
        speakBtn.click();
      }
    }
    
    // Escape ƒë·ªÉ d·ª´ng
    if (event.key === 'Escape') {
      event.preventDefault();
      if (!stopBtn.disabled) {
        stopBtn.click();
      }
    }
    
    // Ctrl/Cmd + D ƒë·ªÉ t·∫£i xu·ªëng
    if ((event.ctrlKey || event.metaKey) && event.key === 'd') {
      event.preventDefault();
      if (!downloadBtn.disabled) {
        downloadBtn.click();
      }
    }
  });

  // Th√™m tooltip cho c√°c n√∫t
  speakBtn.title = 'Ph√°t gi·ªçng n√≥i (Ctrl+Enter)';
  stopBtn.title = 'D·ª´ng ph√°t (Escape)';
  downloadBtn.title = 'T·∫£i xu·ªëng MP3 (Ctrl+D)';

  // T·ª± ƒë·ªông focus v√†o textarea khi trang t·∫£i
  textInput.focus();

  // Th√™m placeholder ƒë·ªông
  const placeholders = [
    'Nh·∫≠p vƒÉn b·∫£n ti·∫øng Vi·ªát ƒë·ªÉ chuy·ªÉn th√†nh gi·ªçng n√≥i...',
    'V√≠ d·ª•: Xin ch√†o, t√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa b·∫°n.',
    'H√£y th·ª≠ nh·∫≠p m·ªôt c√¢u th∆° ho·∫∑c ƒëo·∫°n vƒÉn y√™u th√≠ch...',
    'B·∫°n c√≥ th·ªÉ nh·∫≠p t·ªëi ƒëa 5000 k√Ω t·ª±.'
  ];

  let placeholderIndex = 0;
  setInterval(() => {
    if (!textInput.value && document.activeElement !== textInput) {
      textInput.placeholder = placeholders[placeholderIndex];
      placeholderIndex = (placeholderIndex + 1) % placeholders.length;
    }
  }, 4000);

  // ƒê·∫øm k√Ω t·ª±
  const charCounter = document.createElement('div');
  charCounter.style.cssText = `
    text-align: right;
    font-size: 0.85rem;
    color: #666;
    margin-top: 0.25rem;
  `;
  textInput.parentNode.appendChild(charCounter);

  function updateCharCounter() {
    const length = textInput.value.length;
    charCounter.textContent = `${length}/5000 k√Ω t·ª±`;
    
    if (length > 4500) {
      charCounter.style.color = '#e53e3e';
    } else if (length > 4000) {
      charCounter.style.color = '#dd6b20';
    } else {
      charCounter.style.color = '#666';
    }
  }

  textInput.addEventListener('input', updateCharCounter);
  updateCharCounter();

  console.log('üé§ ·ª®ng d·ª•ng Text-to-Speech ti·∫øng Vi·ªát v·ªõi t√≠nh nƒÉng t·∫£i xu·ªëng ƒë√£ s·∫µn s√†ng!');
});
